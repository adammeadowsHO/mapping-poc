plugins {
    id 'java'
    id 'idea'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}
ext.jaxwsSourceDir = "${buildDir}/generated/sources/jaxws"

configurations {
    jaxws
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.18.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.18.2'
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3' // Must be after lombok
    //aws
    implementation platform("software.amazon.awssdk:bom:2.30.24")
    implementation 'software.amazon.awssdk:s3'
    implementation 'software.amazon.awssdk:sqs'
    implementation 'software.amazon.awssdk:secretsmanager'
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.2'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.1'
    runtimeOnly 'com.amazonaws:aws-lambda-java-log4j2:1.5.1'

    implementation 'jakarta.jws:jakarta.jws-api:3.0.0'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
    implementation 'jakarta.xml.ws:jakarta.xml.ws-api:4.0.2'

    // Soap
    jaxws "com.sun.xml.ws:jaxws-tools:4.0.3"
    jaxws "com.sun.xml.ws:jaxws-rt:4.0.3"
    implementation "com.sun.xml.ws:jaxws-rt:4.0.3"
    jaxws "jakarta.xml.ws:jakarta.xml.ws-api:4.0.2"
    jaxws "jakarta.activation:jakarta.activation-api:2.1.3"
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api-parent:4.0.2'

    //Tests
    // Lombok (for testing purposes)
    testCompileOnly 'org.projectlombok:lombok:1.18.36'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'

    // Add JUnit 5 dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0' // JUnit Jupiter (core library)
    testImplementation 'org.mockito:mockito-core:5.15.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0' // Jupiter runtime engine
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


}

tasks.named('test') {
    useJUnitPlatform()
}

task wsimport {
    description = 'Generate classes from wsdl using wsimport'

    doLast {
        project.mkdir(jaxwsSourceDir)
        ant {
            taskdef(name: 'wsimport',
                    classname: 'com.sun.tools.ws.ant.WsImport',
                    classpath: configurations.jaxws.asPath
            )
            wsimport(
                    keep: true,
                    destdir: jaxwsSourceDir,
                    extension: "true",
                    verbose: true,
                    debug: "true",
                    wsdl: "${projectDir}/src/main/resources/FLService.wsdl",
                    xnocompile: true,
                    package: "com.example.mappingpoc.wsdl") {
                xjcarg(value: "-XautoNameResolution")
            }
        }
    }
}

sourceSets {
    main {
        java.srcDirs += jaxwsSourceDir
    }
}

compileJava {
    dependsOn wsimport
}

task buildZip(type: Zip) {
    into('lib') {
        from(jar)
        from(configurations.runtimeClasspath)
    }
}